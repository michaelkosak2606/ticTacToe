{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["square","props","react_default","a","createElement","className","concat","styleName","pointerStyle","onClick","click","text","Board","_this","this","Square","nextClick","data","squares","Component","App","state","Array","fill","playerXTurn","gameEnded","turn","history","0","zen","handleClick","Object","objectSpread","newSquares","toConsumableArray","updatedHistory","defineProperty","setState","checkWhoWins","restartGame","loadZen","pointerStyleSquare","timeTravel","goToTurnNumber","backInTimeHistory","keys","slice","reduce","obj","key","ok","playersTurn","fetch","then","console","log","columnOne","columnTwo","columnThree","leftDiagonal","rightDiagonal","i","length","push","one","two","three","four","five","value","array","compareX","JSON","stringify","compareO","compareColumns","inArray","_this2","status","buttonRestart","keysOfHistory","shift","gameHistoryButtons","map","turnNumber","index","Number","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b829c517.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Board.css\";\n\nconst square = props => {\n  return (\n    <div\n      className={`square ${props.styleName} ${props.pointerStyle}`}\n      onClick={props.click}\n    >\n      {props.text}\n    </div>\n  );\n};\n\nexport default square;\n","import React, { Component } from \"react\";\nimport Square from \"./Square\";\nimport \"./Board.css\";\n\nexport default class Board extends Component {\n  //Funktionen\n\n  render() {\n    return (\n      <main className=\"board\">\n        <Square\n          pointerStyle={this.props.pointerStyle(0)}\n          styleName=\"leftColumn\"\n          click={() => this.props.nextClick(0)}\n          text={this.props.data.squares[0]}\n        />\n        {/* <Square click={() => this.props.nextClick2()} />  so würde man Funktion/props an weitere Komponente übergeben*/}\n        <Square\n          pointerStyle={this.props.pointerStyle(1)}\n          click={() => this.props.nextClick(1)}\n          text={this.props.data.squares[1]}\n        />\n        <Square\n          pointerStyle={this.props.pointerStyle(2)}\n          click={() => this.props.nextClick(2)}\n          text={this.props.data.squares[2]}\n        />\n        <Square\n          pointerStyle={this.props.pointerStyle(3)}\n          styleName=\"leftColumn\"\n          click={() => this.props.nextClick(3)}\n          text={this.props.data.squares[3]}\n        />\n        <Square\n          pointerStyle={this.props.pointerStyle(4)}\n          click={() => this.props.nextClick(4)}\n          text={this.props.data.squares[4]}\n        />\n        <Square\n          pointerStyle={this.props.pointerStyle(5)}\n          click={() => this.props.nextClick(5)}\n          text={this.props.data.squares[5]}\n        />\n        <Square\n          pointerStyle={this.props.pointerStyle(6)}\n          styleName=\"leftColumn bottomRow\"\n          click={() => this.props.nextClick(6)}\n          text={this.props.data.squares[6]}\n        />\n        <Square\n          pointerStyle={this.props.pointerStyle(7)}\n          styleName=\" bottomRow\"\n          click={() => this.props.nextClick(7)}\n          text={this.props.data.squares[7]}\n        />\n        <Square\n          pointerStyle={this.props.pointerStyle(8)}\n          styleName=\" bottomRow\"\n          click={() => this.props.nextClick(8)}\n          text={this.props.data.squares[8]}\n        />\n      </main>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { CSSTransitionGroup } from \"react-transition-group\";\nimport \"./components/Board.css\";\nimport Board from \"./components/Board\";\n\nclass App extends Component {\n  state = {\n    squares: Array(9).fill(null),\n    playerXTurn: true,\n    gameEnded: false,\n    turn: 1,\n    history: { 0: Array(9).fill(null) },\n    zen: null\n  };\n  // updateHistory() {\n  //   let turn = this.state.turn;\n  //   let newSquares = [...this.state.squares];\n  //   let history = { ...this.state.history };\n  //   let updatedHistory = { ...history, [turn]: newSquares };\n  //   return updatedHistory;\n  // }\n  handleClick = a => {\n    //verstehen wieso es so funktioniert und wieso das andere evtl.\n    // nicht funktioniert hat, wenn updateHistory in eigener Funktion ist\n    // wird nur das array [null,...,null] in die history geaddet, also immer 1 Turn \"zu spät\"\n    // s.d zwei gleiche arrays sich da drin befinden\n\n    // instead of the function updateHistory:\n    let turn = this.state.turn;\n    let history = { ...this.state.history };\n    let newSquares = [...this.state.squares];\n    let updatedHistory = { ...history, [turn]: newSquares };\n\n    if (newSquares[a] === null && this.state.gameEnded === false) {\n      this.state.playerXTurn === true\n        ? (newSquares[a] = \"X\")\n        : (newSquares[a] = \"O\");\n      this.setState(\n        {\n          playerXTurn: !this.state.playerXTurn,\n          turn: this.state.turn + 1,\n          squares: newSquares,\n          history: updatedHistory\n        },\n        () => {\n          this.setState({});\n          if (this.checkWhoWins() !== null) {\n            this.setState({\n              gameEnded: !this.state.gameEnded\n            });\n          }\n        }\n      );\n    }\n  };\n\n  compareColumns() {\n    const newSquares = [...this.state.squares];\n    let columnOne = [];\n    let columnTwo = [];\n    let columnThree = [];\n    let leftDiagonal = [];\n    let rightDiagonal = [];\n    for (let i = 0; i < newSquares.length; i++) {\n      if (i % 3 === 0) {\n        columnOne.push(newSquares[i]);\n      }\n      if (i % 3 === 1) {\n        columnTwo.push(newSquares[i]);\n      }\n      if (i % 3 === 2) {\n        columnThree.push(newSquares[i]);\n      }\n      if (i % 4 === 0) {\n        leftDiagonal.push(newSquares[i]);\n      }\n      if (i % 2 === 0 && i > 0 && i < newSquares.length - 1) {\n        rightDiagonal.push(newSquares[i]);\n      }\n    }\n    return {\n      one: columnOne,\n      two: columnTwo,\n      three: columnThree,\n      four: leftDiagonal,\n      five: rightDiagonal\n    };\n  }\n  inArray(value, array) {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] === value) {\n        return false;\n      }\n    }\n    return true;\n  }\n  checkWhoWins() {\n    const xWins = [\"X\", \"X\", \"X\"];\n    const oWins = [\"O\", \"O\", \"O\"];\n    const newSquares = [...this.state.squares];\n    const compareX = JSON.stringify(xWins);\n    const compareO = JSON.stringify(oWins);\n    let resultOfTheGame =\n      JSON.stringify(newSquares.slice(0, 3)) === compareX ||\n      JSON.stringify(newSquares.slice(3, 6)) === compareX ||\n      JSON.stringify(newSquares.slice(6, 9)) === compareX ||\n      JSON.stringify(this.compareColumns().one) === compareX ||\n      JSON.stringify(this.compareColumns().two) === compareX ||\n      JSON.stringify(this.compareColumns().three) === compareX ||\n      JSON.stringify(this.compareColumns().four) === compareX ||\n      JSON.stringify(this.compareColumns().five) === compareX\n        ? \"Player X wins!\"\n        : JSON.stringify(newSquares.slice(0, 3)) === compareO ||\n          JSON.stringify(newSquares.slice(3, 6)) === compareO ||\n          JSON.stringify(newSquares.slice(6, 9)) === compareO ||\n          JSON.stringify(this.compareColumns().one) === compareO ||\n          JSON.stringify(this.compareColumns().two) === compareO ||\n          JSON.stringify(this.compareColumns().three) === compareO ||\n          JSON.stringify(this.compareColumns().four) === compareO ||\n          JSON.stringify(this.compareColumns().five) === compareO\n        ? \" Player O wins!\"\n        : this.inArray(null, newSquares)\n        ? \"Draw\"\n        : null;\n\n    return resultOfTheGame;\n  }\n  restartGame = () => {\n    this.loadZen();\n    let newSquares = Array(9).fill(null);\n    this.setState({\n      squares: newSquares,\n      playerXTurn: true,\n      gameEnded: false,\n      turn: 1,\n      history: { 0: Array(9).fill(null) }\n    });\n  };\n  pointerStyleSquare = a => {\n    const newSquares = [...this.state.squares];\n    return newSquares[a] !== null && \"noPointer\";\n    // if(newSquares[a] !== null ) {return \"noPointer\"}\n  };\n  timeTravel = goToTurnNumber => {\n    //console.log(goToTurnNumber);\n    this.loadZen();\n\n    let history = { ...this.state.history };\n\n    //if goToTurnNumber is 3, then we get an array of first 3 keys, which is [0,1,2]\n    // because the history in turn 3 has exactly 3 elements and so on\n    let keysOfHistory = Object.keys(history).slice(0, goToTurnNumber);\n\n    //reducing the copy this.state.history to the elements\n    // with keys from the array above, in this case {0:[...], 1:[...],2:[...]}\n    //putting them into an object {}\n    let backInTimeHistory = keysOfHistory.reduce((obj, key) => {\n      obj[key] = history[key];\n      return obj;\n    }, {});\n    //this.state.squares has to get the value of the last element from\n    // the array backInTimeHistory\n    let ok = goToTurnNumber - 1;\n    //check the number of turn we going back to, and assign right player to this turn\n\n    let playersTurn = goToTurnNumber % 2 === 1 ? true : false;\n\n    this.setState({\n      squares: backInTimeHistory[ok],\n      playerXTurn: playersTurn,\n      gameEnded: false,\n      turn: goToTurnNumber,\n      history: backInTimeHistory\n    });\n    // console.log(this.state);\n  };\n  loadZen = () => {\n    fetch(\"https://api.github.com/zen\")\n      .then(data => data.text())\n      .then(zen => this.setState({ zen }))\n      .then(console.log(this.state.zen));\n  };\n\n  componentDidUpdate() {\n    //loggt zwei identische states, wegen der callback Funktion\n    // in setState in der handleClick Methode\n    //console.log(this.state);\n    // console.log(this.state.zen);\n  }\n  async componentDidMount() {\n    const data = await fetch(\"https://api.github.com/zen\");\n    const text = await data.text();\n    this.setState({ zen: text });\n    console.log(text);\n  }\n\n  render() {\n    //Statusanzeige: wer dran ist:\n    let status = \"Player  \" + (this.state.playerXTurn ? \"X\" : \"O\") + \"'s turn\";\n    //Anzeige der Restart-Buttons:\n    let buttonRestart = (\n      <div className=\"zenContainer\">\n        <p className=\"zenQuoteAnnouncement\">Random Zen quote:</p>\n        <div className=\"zenQuoteWindow\"> {this.state.zen}</div>\n      </div>\n    );\n    if (this.checkWhoWins() !== null) {\n      buttonRestart = (\n        <button className=\"restartButton\" onClick={this.restartGame}>\n          {this.checkWhoWins()}\n          <span>Restart the game</span>\n        </button>\n      );\n    }\n    //gameHistoryButtons\n    let history = { ...this.state.history };\n    let keysOfHistory = Object.keys(history);\n    keysOfHistory.shift();\n    var gameHistoryButtons = keysOfHistory.map((turnNumber, index) => {\n      let goToTurnNumber = Number(turnNumber);\n      return (\n        <button\n          className=\"gameHistoryButton\"\n          key={turnNumber}\n          onClick={() => this.timeTravel(goToTurnNumber)}\n        >\n          Go to turn : {goToTurnNumber}\n        </button>\n      );\n    });\n\n    return (\n      <div className=\"game\">\n        <main className=\"leftSide\">\n          <div> {status} </div>\n\n          <Board\n            data={this.state}\n            nextClick={this.handleClick}\n            pointerStyle={this.pointerStyleSquare}\n          />\n\n          {buttonRestart}\n        </main>\n        <main className=\"rightSide\">\n          Turns\n          {gameHistoryButtons}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}